<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.questory.repository.PlanRepository">
    <select id="findByMemberEmail" parameterType="string" resultType="com.ssafy.questory.domain.Plan">
        SELECT
        plan_id AS planId,
        member_email AS memberEmail,
        title,
        description,
        start_date AS startDate,
        end_date AS endDate,
        created_at AS createdAt,
        is_start AS isStart,
        is_shared AS isShared
        FROM Plans
        WHERE member_email = #{memberEmail}
    </select>

    <select id="findPlansListCreatedByMe" resultMap="plansMap" resultType="com.ssafy.questory.dto.response.plan.PlansListResponseDto">
        <![CDATA[
            SELECT
            p.plan_id AS plan_id,
            p.title AS plan_title,
            p.description AS plan_description,
            p.start_date AS startDate,
            p.end_date AS endDate,
            DATEDIFF(p.end_date, p.start_date) + 1 AS duration,
            CASE
            WHEN NOW() < p.start_date THEN 'PLANNING'
            WHEN NOW() BETWEEN p.start_date AND p.end_date THEN 'CONFIRMED'
            WHEN NOW() > p.end_date THEN 'COMPLETED'
            ELSE 'UNKNOWN'
            END AS status,
            COUNT(DISTINCT pr.attraction_id) AS routes_cnt,
            CASE
            WHEN NOW() < p.start_date THEN 0
            WHEN NOW() > p.end_date THEN 100
            ELSE ROUND(
            (DATEDIFF(NOW(), p.start_date) + 1) / (DATEDIFF(p.end_date, p.start_date) + 1) * 100,
            0
            )
            END AS completion_rate,
            p.created_at AS createdAt
            FROM Plans p
            LEFT JOIN Plans_Routes pr ON p.plan_id = pr.plan_id
            WHERE p.member_email = #{memberEmail}
            GROUP BY
            p.plan_id, p.title, p.description, p.start_date, p.end_date, p.created_at
        ]]>
    </select>

    <select id="findPlansListCreatedByNotMe" resultMap="plansMap" resultType="com.ssafy.questory.dto.response.plan.PlansListResponseDto">
        <![CDATA[
                SELECT
                p.plan_id AS plan_id,
                p.title AS plan_title,
                p.description AS plan_description,
                p.start_date AS startDate,
                p.end_date AS endDate,
                DATEDIFF(p.end_date, p.start_date) + 1 AS duration,
                CASE
                WHEN NOW() < p.start_date THEN 'PLANNING'
                WHEN NOW() BETWEEN p.start_date AND p.end_date THEN 'CONFIRMED'
                WHEN NOW() > p.end_date THEN 'COMPLETED'
                ELSE 'UNKNOWN'
                END AS status,
                COUNT(DISTINCT pr.attraction_id) AS routes_cnt,
                CASE
                WHEN NOW() < p.start_date THEN 0
                WHEN NOW() > p.end_date THEN 100
                ELSE ROUND(
                (DATEDIFF(NOW(), p.start_date) + 1) / (DATEDIFF(p.end_date, p.start_date) + 1) * 100,
                0
                )
                END AS completion_rate,
                p.created_at AS createdAt
                FROM Plans p
                LEFT JOIN Plans_Routes pr ON p.plan_id = pr.plan_id
                WHERE p.member_email != #{memberEmail}
                GROUP BY
                p.plan_id, p.title, p.description, p.start_date, p.end_date, p.created_at
            ]]>
    </select>

    <select id="selectSharedPlansByMemberEmail" resultMap="plansMap" resultType="com.ssafy.questory.dto.response.plan.PlansListResponseDto">
        <![CDATA[
            SELECT
            p.plan_id AS plan_id,
            p.title AS plan_title,
            p.description AS plan_description,
            p.start_date AS startDate,
            p.end_date AS endDate,
            CASE
            WHEN p.start_date IS NULL OR p.end_date IS NULL THEN 1
            ELSE DATEDIFF(p.end_date, p.start_date) + 1
            END AS duration,
            CASE
                WHEN NOW() < p.start_date THEN 'PLANNING'
                WHEN NOW() BETWEEN p.start_date AND p.end_date THEN 'CONFIRMED'
                WHEN NOW() > p.end_date THEN 'COMPLETED'
                ELSE 'UNKNOWN'
                END AS status,
            COALESCE(route_stats.routesCnt, 0) AS routes_cnt,
            CASE
            WHEN route_stats.routesCnt = 0 THEN 0
            WHEN p.start_date IS NULL OR p.end_date IS NULL THEN 0
            WHEN route_stats.total_days = 0 THEN 0
            ELSE LEAST(100, ROUND((route_stats.filled_days / route_stats.total_days) * 100))
            END AS completion_rate,
            p.created_at AS createdAt
            FROM Plans p
            INNER JOIN Saves s ON p.plan_id = s.plan_id
            LEFT JOIN (
            SELECT
            pr.plan_id,
            COUNT(*) AS routesCnt,
            COUNT(DISTINCT pr.day) AS filled_days,
            CASE
            WHEN p2.start_date IS NULL OR p2.end_date IS NULL THEN 1
            ELSE DATEDIFF(p2.end_date, p2.start_date) + 1
            END AS total_days
            FROM Plans_Routes pr
            INNER JOIN Plans p2 ON pr.plan_id = p2.plan_id
            GROUP BY pr.plan_id, p2.start_date, p2.end_date
            ) route_stats ON p.plan_id = route_stats.plan_id
            WHERE s.member_email = #{memberEmail}
            ORDER BY s.saved_at DESC;
        ]]>
    </select>

    <resultMap type="PlansListResponseDto" id="plansMap">
        <result column="plan_id" property="planId" />
        <result column="plan_title" property="planTitle" />
        <result column="plan_description" property="planDescription" />
        <result column="startDate" property="startDate" />
        <result column="endDate" property="endDate" />
        <result column="duration" property="duration" />
        <result column="status" property="status" />
        <result column="routes_cnt" property="routesCnt" />
        <result column="completion_rate" property="completionRate" />
        <result column="createdAt" property="createdAt" />
    </resultMap>

    <insert id="create" parameterType="com.ssafy.questory.domain.Plan" useGeneratedKeys="true" keyProperty="planId">
        INSERT INTO Plans (member_email, title, description, start_date, end_date, created_at, is_start, is_shared)
        VALUES (#{memberEmail}, #{title}, #{description}, #{startDate}, #{endDate}, NOW(), 0, 1)
    </insert>
    <update id="update" parameterType="com.ssafy.questory.domain.Plan">
        UPDATE Plans
        SET title = #{title},
        description = #{description},
        start_date = #{startDate},
        end_date = #{endDate}
        WHERE plan_id = #{planId}
    </update>
    <select id="findById" parameterType="long" resultMap="planResultMap">
        SELECT * FROM Plans WHERE plan_id = #{planId}
    </select>
    <resultMap id="planResultMap" type="com.ssafy.questory.domain.Plan">
        <id property="planId" column="plan_id"/>
        <result property="memberEmail" column="member_email"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="startDate" column="start_date"/>
        <result property="endDate" column="end_date"/>
        <result property="createdAt" column="created_at"/>
        <result property="isStart" column="is_start"/>
        <result property="isShared" column="is_shared"/>
    </resultMap>
    <delete id="deleteById" parameterType="long">
        DELETE FROM Plans WHERE plan_id = #{planId}
    </delete>
    <update id="toggleShareStatus">
        UPDATE plans
        SET is_shared = #{shared}
        WHERE plan_id = #{planId}
    </update>
</mapper>
